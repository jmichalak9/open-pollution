// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package measurement is a generated GoMock package.
package measurement

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetMeasurements mocks base method.
func (m *MockCache) GetMeasurements() []Measurement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurements")
	ret0, _ := ret[0].([]Measurement)
	return ret0
}

// GetMeasurements indicates an expected call of GetMeasurements.
func (mr *MockCacheMockRecorder) GetMeasurements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurements", reflect.TypeOf((*MockCache)(nil).GetMeasurements))
}

// UpdateMeasurements mocks base method.
func (m *MockCache) UpdateMeasurements(arg0 []Measurement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMeasurements", arg0)
}

// UpdateMeasurements indicates an expected call of UpdateMeasurements.
func (mr *MockCacheMockRecorder) UpdateMeasurements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeasurements", reflect.TypeOf((*MockCache)(nil).UpdateMeasurements), arg0)
}
